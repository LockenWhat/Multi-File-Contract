/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FFWClubNFTInterface extends ethers.utils.Interface {
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "MAX_PER_AIRDROP_ADDRESS()": FunctionFragment;
    "MAX_PER_EARLY_ADDRESS()": FunctionFragment;
    "MAX_PER_PRESALE_ADDRESS()": FunctionFragment;
    "MAX_PER_PUBLICSALE_ADDRESS()": FunctionFragment;
    "MAX_PER_VIP_ADDRESS()": FunctionFragment;
    "MAX_SUPPLY()": FunctionFragment;
    "TOTAL_AIRDROP_RESERVE()": FunctionFragment;
    "TOTAL_EARLY_RESERVE()": FunctionFragment;
    "TOTAL_PRESALE_RESERVE()": FunctionFragment;
    "TOTAL_TEAM_RESERVE()": FunctionFragment;
    "TOTAL_VIP_RESERVE()": FunctionFragment;
    "VIPAccessMerkleRoot()": FunctionFragment;
    "WETH()": FunctionFragment;
    "airdropCounter(address)": FunctionFragment;
    "airdropMerkleRoot()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "baseURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "disbursePayments(address[],uint256[])": FunctionFragment;
    "disburseWETHPayments(address[],uint256[])": FunctionFragment;
    "earlyAccessMerkleRoot()": FunctionFragment;
    "earlyCounter(address)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "freezeMetadata()": FunctionFragment;
    "freezeSettings()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "metadataIsFrozen()": FunctionFragment;
    "mintAirdrop(bytes32[],uint64)": FunctionFragment;
    "mintEarlyAccessSale(bytes32[],uint64)": FunctionFragment;
    "mintPresale(bytes32[],uint64)": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "mintTo(address,uint64)": FunctionFragment;
    "mintToTeam(uint64[],address[])": FunctionFragment;
    "mintToWithDifferentPayee(address,address,uint64)": FunctionFragment;
    "mintVIPAccessSale(bytes32[],uint64)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "phase()": FunctionFragment;
    "presaleCounter(address)": FunctionFragment;
    "publicsaleCounter(address)": FunctionFragment;
    "reduceSupply(uint64)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revealNFTs()": FunctionFragment;
    "revealed()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "selfMint(address,uint64)": FunctionFragment;
    "setAirdropMerkleRoot(bytes32)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setEarlyAccessMerkleRoot(bytes32)": FunctionFragment;
    "setLimits(uint16,uint16,uint16,uint16,uint16,uint64,uint64,uint64,uint64,uint64)": FunctionFragment;
    "setMerkleMintVerification(bool)": FunctionFragment;
    "setMerkleRoots(bytes32,bytes32,bytes32,bytes32)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setPhaseAndMintPrice(uint8,uint256)": FunctionFragment;
    "setProxyRegistry(address)": FunctionFragment;
    "setVIPAccessMerkleRoot(bytes32)": FunctionFragment;
    "setWhitelistMerkleRoot(bytes32)": FunctionFragment;
    "settingsIsFrozen()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "teamCounter(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalAirdropCounter()": FunctionFragment;
    "totalEarlyCounter()": FunctionFragment;
    "totalPresaleCounter()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalTeamCounter()": FunctionFragment;
    "totalVIPCounter()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vipCounter(address)": FunctionFragment;
    "whitelistMerkleRoot()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_AIRDROP_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_EARLY_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_PRESALE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_PUBLICSALE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_VIP_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_AIRDROP_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_EARLY_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_PRESALE_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_TEAM_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_VIP_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VIPAccessMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airdropCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "disbursePayments",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseWETHPayments",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyAccessMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataIsFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAirdrop",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintEarlyAccessSale",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPresale",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToTeam",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToWithDifferentPayee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVIPAccessSale",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "phase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "publicsaleCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revealed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEarlyAccessMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimits",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleMintVerification",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoots",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPhaseAndMintPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVIPAccessMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settingsIsFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamCounter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAirdropCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarlyCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPresaleCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTeamCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVIPCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vipCounter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistMerkleRoot",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_AIRDROP_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_EARLY_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_PRESALE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_PUBLICSALE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_VIP_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_AIRDROP_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_EARLY_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_PRESALE_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_TEAM_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_VIP_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VIPAccessMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disbursePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseWETHPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyAccessMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataIsFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEarlyAccessSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintToTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintToWithDifferentPayee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVIPAccessSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicsaleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyAccessMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleMintVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseAndMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVIPAccessMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settingsIsFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAirdropCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarlyCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPresaleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTeamCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVIPCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vipCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMerkleRoot",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string] & {
    userAddress: string;
    relayerAddress: string;
    functionSignature: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class FFWClubNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FFWClubNFTInterface;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    MAX_PER_AIRDROP_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MAX_PER_EARLY_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MAX_PER_PRESALE_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MAX_PER_PUBLICSALE_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MAX_PER_VIP_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_AIRDROP_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_EARLY_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_PRESALE_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_TEAM_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_VIP_RESERVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    VIPAccessMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    airdropCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    airdropMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disbursePayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disburseWETHPayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earlyAccessMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    earlyCounter(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metadataIsFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    mintAirdrop(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintEarlyAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPresale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintTo(
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintToTeam(
      counts: BigNumberish[],
      toAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintToWithDifferentPayee(
      wETHPayee: string,
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintVIPAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    phase(overrides?: CallOverrides): Promise<[number]>;

    presaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicsaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reduceSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealed(overrides?: CallOverrides): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    selfMint(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAirdropMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      __baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarlyAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimits(
      airdropLimit: BigNumberish,
      earlyAccessLimit: BigNumberish,
      vipAccessLimit: BigNumberish,
      preSaleLimit: BigNumberish,
      publicSaleLimit: BigNumberish,
      totalTeamReserve: BigNumberish,
      totalAirdropReserve: BigNumberish,
      earlyAccessReserve: BigNumberish,
      vipAccessReserve: BigNumberish,
      totalPresaleReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleMintVerification(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoots(
      _airdropRoot: BytesLike,
      _earlyAccessRoot: BytesLike,
      _vipAccessRoot: BytesLike,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseAndMintPrice(
      _phase: BigNumberish,
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProxyRegistry(
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVIPAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settingsIsFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    teamCounter(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalAirdropCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalEarlyCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPresaleCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTeamCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVIPCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vipCounter(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<[string]>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  MAX_PER_AIRDROP_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MAX_PER_EARLY_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MAX_PER_PRESALE_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MAX_PER_PUBLICSALE_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MAX_PER_VIP_ADDRESS(overrides?: CallOverrides): Promise<number>;

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_AIRDROP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_EARLY_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_PRESALE_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_TEAM_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_VIP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

  VIPAccessMerkleRoot(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  airdropCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  airdropMerkleRoot(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disbursePayments(
    payees_: string[],
    amounts_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disburseWETHPayments(
    payees_: string[],
    amounts_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earlyAccessMerkleRoot(overrides?: CallOverrides): Promise<string>;

  earlyCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeMetadata(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeSettings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataIsFrozen(overrides?: CallOverrides): Promise<boolean>;

  mintAirdrop(
    _merkleProof: BytesLike[],
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintEarlyAccessSale(
    _merkleProof: BytesLike[],
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPresale(
    _merkleProof: BytesLike[],
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mintTo(
    _to: string,
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintToTeam(
    counts: BigNumberish[],
    toAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintToWithDifferentPayee(
    wETHPayee: string,
    _to: string,
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintVIPAccessSale(
    _merkleProof: BytesLike[],
    count: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  phase(overrides?: CallOverrides): Promise<number>;

  presaleCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  publicsaleCounter(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reduceSupply(
    newMaxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealNFTs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealed(overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  selfMint(
    to: string,
    count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAirdropMerkleRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    __baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarlyAccessMerkleRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimits(
    airdropLimit: BigNumberish,
    earlyAccessLimit: BigNumberish,
    vipAccessLimit: BigNumberish,
    preSaleLimit: BigNumberish,
    publicSaleLimit: BigNumberish,
    totalTeamReserve: BigNumberish,
    totalAirdropReserve: BigNumberish,
    earlyAccessReserve: BigNumberish,
    vipAccessReserve: BigNumberish,
    totalPresaleReserve: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleMintVerification(
    isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoots(
    _airdropRoot: BytesLike,
    _earlyAccessRoot: BytesLike,
    _vipAccessRoot: BytesLike,
    _whitelistRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhaseAndMintPrice(
    _phase: BigNumberish,
    _mintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProxyRegistry(
    proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVIPAccessMerkleRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistMerkleRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settingsIsFrozen(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  teamCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalAirdropCounter(overrides?: CallOverrides): Promise<BigNumber>;

  totalEarlyCounter(overrides?: CallOverrides): Promise<BigNumber>;

  totalPresaleCounter(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTeamCounter(overrides?: CallOverrides): Promise<BigNumber>;

  totalVIPCounter(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vipCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    MAX_PER_AIRDROP_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MAX_PER_EARLY_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MAX_PER_PRESALE_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MAX_PER_PUBLICSALE_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MAX_PER_VIP_ADDRESS(overrides?: CallOverrides): Promise<number>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_AIRDROP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_EARLY_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_PRESALE_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_TEAM_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_VIP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    VIPAccessMerkleRoot(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    airdropCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    airdropMerkleRoot(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    disbursePayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    disburseWETHPayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    earlyAccessMerkleRoot(overrides?: CallOverrides): Promise<string>;

    earlyCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    freezeMetadata(overrides?: CallOverrides): Promise<void>;

    freezeSettings(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataIsFrozen(overrides?: CallOverrides): Promise<boolean>;

    mintAirdrop(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintEarlyAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPresale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintTo(
      _to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintToTeam(
      counts: BigNumberish[],
      toAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintToWithDifferentPayee(
      wETHPayee: string,
      _to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintVIPAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    phase(overrides?: CallOverrides): Promise<number>;

    presaleCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    publicsaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reduceSupply(
      newMaxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revealNFTs(overrides?: CallOverrides): Promise<void>;

    revealed(overrides?: CallOverrides): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfMint(
      to: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAirdropMerkleRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(__baseURI: string, overrides?: CallOverrides): Promise<void>;

    setEarlyAccessMerkleRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimits(
      airdropLimit: BigNumberish,
      earlyAccessLimit: BigNumberish,
      vipAccessLimit: BigNumberish,
      preSaleLimit: BigNumberish,
      publicSaleLimit: BigNumberish,
      totalTeamReserve: BigNumberish,
      totalAirdropReserve: BigNumberish,
      earlyAccessReserve: BigNumberish,
      vipAccessReserve: BigNumberish,
      totalPresaleReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleMintVerification(
      isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoots(
      _airdropRoot: BytesLike,
      _earlyAccessRoot: BytesLike,
      _vipAccessRoot: BytesLike,
      _whitelistRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    setPhaseAndMintPrice(
      _phase: BigNumberish,
      _mintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyRegistry(proxy: string, overrides?: CallOverrides): Promise<void>;

    setVIPAccessMerkleRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistMerkleRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settingsIsFrozen(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    teamCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalAirdropCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalEarlyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalPresaleCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTeamCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalVIPCounter(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vipCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_AIRDROP_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_EARLY_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_PRESALE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_PUBLICSALE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_VIP_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_AIRDROP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_EARLY_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_PRESALE_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_TEAM_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_VIP_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    VIPAccessMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    airdropCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    airdropMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disbursePayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disburseWETHPayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earlyAccessMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    earlyCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataIsFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    mintAirdrop(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintEarlyAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPresale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintTo(
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintToTeam(
      counts: BigNumberish[],
      toAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintToWithDifferentPayee(
      wETHPayee: string,
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintVIPAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    phase(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    publicsaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reduceSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealed(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    selfMint(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAirdropMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      __baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarlyAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimits(
      airdropLimit: BigNumberish,
      earlyAccessLimit: BigNumberish,
      vipAccessLimit: BigNumberish,
      preSaleLimit: BigNumberish,
      publicSaleLimit: BigNumberish,
      totalTeamReserve: BigNumberish,
      totalAirdropReserve: BigNumberish,
      earlyAccessReserve: BigNumberish,
      vipAccessReserve: BigNumberish,
      totalPresaleReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleMintVerification(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoots(
      _airdropRoot: BytesLike,
      _earlyAccessRoot: BytesLike,
      _vipAccessRoot: BytesLike,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhaseAndMintPrice(
      _phase: BigNumberish,
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProxyRegistry(
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVIPAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settingsIsFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    teamCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAirdropCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalEarlyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalPresaleCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTeamCounter(overrides?: CallOverrides): Promise<BigNumber>;

    totalVIPCounter(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vipCounter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PER_AIRDROP_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PER_EARLY_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PER_PRESALE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PER_PUBLICSALE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PER_VIP_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_AIRDROP_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_EARLY_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_PRESALE_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_TEAM_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_VIP_RESERVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VIPAccessMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disbursePayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disburseWETHPayments(
      payees_: string[],
      amounts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earlyAccessMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlyCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeMetadata(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeSettings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataIsFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAirdrop(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintEarlyAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPresale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTo(
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintToTeam(
      counts: BigNumberish[],
      toAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintToWithDifferentPayee(
      wETHPayee: string,
      _to: string,
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintVIPAccessSale(
      _merkleProof: BytesLike[],
      count: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicsaleCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reduceSupply(
      newMaxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealNFTs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    selfMint(
      to: string,
      count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAirdropMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      __baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarlyAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimits(
      airdropLimit: BigNumberish,
      earlyAccessLimit: BigNumberish,
      vipAccessLimit: BigNumberish,
      preSaleLimit: BigNumberish,
      publicSaleLimit: BigNumberish,
      totalTeamReserve: BigNumberish,
      totalAirdropReserve: BigNumberish,
      earlyAccessReserve: BigNumberish,
      vipAccessReserve: BigNumberish,
      totalPresaleReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleMintVerification(
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoots(
      _airdropRoot: BytesLike,
      _earlyAccessRoot: BytesLike,
      _vipAccessRoot: BytesLike,
      _whitelistRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhaseAndMintPrice(
      _phase: BigNumberish,
      _mintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProxyRegistry(
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVIPAccessMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settingsIsFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAirdropCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEarlyCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPresaleCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTeamCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVIPCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vipCounter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
