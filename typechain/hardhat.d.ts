/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "EIP712Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Base__factory>;
    getContractFactory(
      name: "NativeMetaTransaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeMetaTransaction__factory>;
    getContractFactory(
      name: "RandomlyAssigned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomlyAssigned__factory>;
    getContractFactory(
      name: "WithLimitedSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithLimitedSupply__factory>;
    getContractFactory(
      name: "ERC721A",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721A__factory>;
    getContractFactory(
      name: "ERC721Tradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Tradable__factory>;
    getContractFactory(
      name: "ProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyRegistry__factory>;
    getContractFactory(
      name: "FFWClubFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FFWClubFactory__factory>;
    getContractFactory(
      name: "FFWClubNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FFWClubNFT__factory>;
    getContractFactory(
      name: "FactoryERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryERC721__factory>;
    getContractFactory(
      name: "MockProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockProxyRegistry__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "EIP712Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Base>;
    getContractAt(
      name: "NativeMetaTransaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeMetaTransaction>;
    getContractAt(
      name: "RandomlyAssigned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomlyAssigned>;
    getContractAt(
      name: "WithLimitedSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WithLimitedSupply>;
    getContractAt(
      name: "ERC721A",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721A>;
    getContractAt(
      name: "ERC721Tradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Tradable>;
    getContractAt(
      name: "ProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyRegistry>;
    getContractAt(
      name: "FFWClubFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FFWClubFactory>;
    getContractAt(
      name: "FFWClubNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FFWClubNFT>;
    getContractAt(
      name: "FactoryERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryERC721>;
    getContractAt(
      name: "MockProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockProxyRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
